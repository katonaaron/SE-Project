module com.fullcart.session.Webshop;

data <java> "java.lang.Long" from "rt.jar" as Long;
data <java> "java.lang.Iterable" from "rt.jar" as List;
data <java> "java.lang.String" from "rt.jar" as String;
data <java> "com.fullcart.dto.ProductDTO" from "rt.jar" as Product;
data <java> "com.fullcart.dto.UserDTO" from "rt.jar" as User;
data <java> "com.fullcart.dto.OrderDTO" from "rt.jar" as Order;


/**
 * C = Client
 * P = Product service
 */
global protocol ProductSession(role C, role P) {
    choice at C {
        GetAll() from C to P;
        Ok(List) from P to C;
        do ProductSession(C, P);
    } or {
        GetOne(Long) from C to P;
        choice at P {
            Ok(Product) from P to C;
        } or {
            NotFound() from P to C;
        }
        do ProductSession(C, P);
    } or {
        Create(Product) from C to P;
        choice at P {
            Ok(Product) from P to C;
        } or {
            Err(String) from P to C;
        }
        do ProductSession(C, P);
    } or {
        Update(Long, Product) from C to P;
        choice at P {
            Ok(Product) from P to C;
        } or {
            NotFound() from P to C;
        } or {
            Err(String) from P to C;
        }
        do ProductSession(C, P);
    } or {
        Replace(Long, Product) from C to P;
        choice at P {
            Ok(Product) from P to C;
        } or {
            Created(Product) from P to C;
        } or {
            Err(String) from P to C;
        }
        do ProductSession(C, P);
    } or {
        Delete(Long) from C to P;
        choice at P {
            Ok() from P to C;
        } or {
            NotFound() from P to C;
        }
        do ProductSession(C, P);
    } or {
        Bye() from C to P;
    }
}

/**
 * C = Client
 * U = User service
 */
global protocol UserSession(role C, role U) {
    choice at C {
        GetAll() from C to U;
        Ok(List) from U to C;
        do UserSession(C, U);
    } or {
        GetOne(Long) from C to U;
        choice at U {
            Ok(User) from U to C;
        } or {
            NotFound() from U to C;
        }
        do UserSession(C, U);
    } or {
        Create(User) from C to U;
        choice at U {
            Ok(User) from U to C;
        } or {
            Err(String) from U to C;
        }
        do UserSession(C, U);
    } or {
        Update(Long, User) from C to U;
        choice at U {
            Ok(User) from U to C;
        } or {
            NotFound() from U to C;
        } or {
            Err(String) from U to C;
        }
        do UserSession(C, U);
    } or {
        Replace(Long, User) from C to U;
        choice at U {
            Ok(User) from U to C;
        } or {
            Created(User) from U to C;
        } or {
            Err(String) from U to C;
        }
        do UserSession(C, U);
    } or {
        Delete(Long) from C to U;
        choice at U {
            Ok() from U to C;
        } or {
            NotFound() from U to C;
        }
        do UserSession(C, U);
    } or {
        Bye() from C to U;
    }
}

/**
 * C = Client
 * P = Product service
 * U = User service
 * B = buying service
 */
global protocol BuyingSession (role C, role P, role U, role B)
 {
    choice at C {
        GetAll() from C to B;
        Ok(List) from B to C;
        do BuyingSession(C, P, U, B);
    } or {
        GetOne(Long) from C to B;
        choice at B {
            Ok(Order) from B to C;
        } or {
            NotFound() from B to C;
        }
        do BuyingSession(C, P, U, B);
    } or {
         Create(Order) from C to B;
         choice at B {
             GetOne(Long) from B to U;
             choice at U {
                 Ok(User) from U to B;
                 GetAll(List) from B to P;
                 choice at P {
                     Ok(List) from P to B;
                     Ok(Order) from B to C;
                 } or {
                     NotFound(Long) from P to B;
                     ProductNotFound(Long) from B to C;
                 }
             } or {
                 NotFound(Long) from U to B;
                 UserNotFound(Long) from B to C;
             }
         } or {
            Err(String) from B to C;
         }
         do BuyingSession(C, P, U, B);
    } or {
        Cancel(Long) from C to B;
        choice at B {
            Ok(Order) from B to C;
        } or {
            NotFound() from B to C;
        } or {
            NotAllowed() from B to C;
        }
        do BuyingSession(C, P, U, B);
    } or {
        Complete(Long) from C to B;
        choice at B {
            Ok(Order) from B to C;
        } or {
            NotFound() from B to C;
        } or {
            NotAllowed() from B to C;
        }
        do BuyingSession(C, P, U, B);
    } or {
        Bye() from C to B;
        Bye() from B to P;
        Bye() from B to U;
    }
}
